1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
/**
 * Opportunity Cost Extension
 * 
 * This background script handles:
 * 1. Toolbar icon click event
 * 2. Bitcoin price fetching and storage
 * 3. Communication with content scripts
 * 4. User preferences management
 */

import { PriceDatabase } from './storage.js';

// Constants
const API_BASE = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin";
const DEFAULT_REFRESH_INTERVAL = 15 * 60 * 1000; // 15 minutes in milliseconds
const CACHE_DURATION = 5 * 60 * 1000; // 5 minute cache duration for aggressive caching
const INITIAL_BACKOFF = 2000; // Initial backoff duration in ms (2 seconds)
const MAX_BACKOFF = 5 * 60 * 1000; // Maximum backoff duration (5 minutes)
const MAX_RETRIES = 5; // Maximum number of retry attempts

// Extension state
let priceRefreshInterval = null;
let userPreferences = null;
let backoffTime = INITIAL_BACKOFF;
let retryCount = 0;

// Handle toolbar icon click
chrome.action.onClicked.addListener(() => {
  // Check if user has been prompted about newsletter
  chrome.storage.local.get(['newsletter_prompted'], function(result) {
    // If user hasn't been prompted yet, show newsletter popup first
    if (!result.newsletter_prompted) {
      // Set flag to prevent repeated prompts
      chrome.storage.local.set({ 'newsletter_prompted': true });
      
      // Open newsletter signup in a popup
      chrome.windows.create({
        url: 'newsletter.html',
        type: 'popup',
        width: 550,
        height: 600
      });
    } else {
      // Otherwise, proceed directly to Opportunity Cost website
      chrome.tabs.create({ 
        url: "https://opportunitycost.app?utm_source=chrome_ext" 
      });
    }
  });
});

// Add context menu option to open settings
chrome.runtime.onInstalled.addListener(() => {
  chrome.contextMenus.create({
    id: "open-options",
    title: "Options & Statistics",
    contexts: ["action"]
  });
});

// Handle context menu clicks
chrome.contextMenus.onClicked.addListener((info, tab) => {
  if (info.menuItemId === "open-options") {
    chrome.runtime.openOptionsPage();
  }
});

// Load user preferences
async function loadUserPreferences() {
  try {
    userPreferences = await PriceDatabase.getPreferences();
    console.log('Loaded user preferences:', userPreferences);
    
    // Apply preferences
    applyUserPreferences();
    
    return userPreferences;
  } catch (error) {
    console.error('Error loading user preferences:', error);
    
    // Use defaults
    userPreferences = {
      defaultCurrency: 'usd',
      displayMode: 'dual-display', // Changed default from 'sats-only' to 'dual-display'
      autoRefresh: true,
      trackStats: true
    };
    
    return userPreferences;
  }
}

// Apply user preferences to extension behavior
function applyUserPreferences() {
  // Set up auto-refresh based on preferences
  if (priceRefreshInterval) {
    clearInterval(priceRefreshInterval);
    priceRefreshInterval = null;
  }
  
  if (userPreferences.autoRefresh) {
    priceRefreshInterval = setInterval(fetchAndStoreBitcoinPrice, DEFAULT_REFRESH_INTERVAL);
  }
}

// Get API endpoint based on user's preferred currency
function getApiEndpoint() {
  const currency = userPreferences?.defaultCurrency || 'usd';
  return `${API_BASE}&vs_currencies=${currency}`;
}

// Fetch and store Bitcoin price with exponential backoff
async function fetchAndStoreBitcoinPrice() {
  if (!userPreferences) {
    await loadUserPreferences();
  }
  
  try {
    const currency = userPreferences.defaultCurrency || 'usd';
    const apiEndpoint = getApiEndpoint();
    
    // Fetch current price from API
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      // Check if we hit rate limits (HTTP 429) or server errors (5xx)
      if (response.status === 429 || response.status >= 500) {
        if (retryCount < MAX_RETRIES) {
          console.warn(`API request failed with status ${response.status}. Retrying in ${backoffTime/1000} seconds...`);
          retryCount++;
          
          // Set up retry with exponential backoff
          return new Promise((resolve) => {
            setTimeout(async () => {
              // Double the backoff time for next potential retry (exponential backoff)
              backoffTime = Math.min(backoffTime * 2, MAX_BACKOFF);
              const result = await fetchAndStoreBitcoinPrice();
              resolve(result);
            }, backoffTime);
          });
        } else {
          console.error(`Maximum retries (${MAX_RETRIES}) reached. Using cached data if available.`);
          // Reset backoff for next time
          backoffTime = INITIAL_BACKOFF;
          retryCount = 0;
          return null;
        }
      } else {
        console.warn(`Failed to fetch BTC price from API: ${response.status} ${response.statusText}`);
        return null;
      }
    }
    
    // Reset backoff parameters on successful request
    backoffTime = INITIAL_BACKOFF;
    retryCount = 0;
    
    const data = await response.json();
    const btcPrice = data?.bitcoin?.[currency];
    
    if (!btcPrice) {
      console.warn('Invalid BTC price data received from API');
      return null;
    }
    
    // Store price in database
    await PriceDatabase.saveBitcoinPrice(currency, btcPrice);
    console.log(`Updated BTC price (${currency}): ${btcPrice}`);
    
    return btcPrice;
  } catch (error) {
    console.error('Error fetching or storing BTC price:', error);
    
    // Handle network errors with backoff as well
    if (retryCount < MAX_RETRIES) {
      console.warn(`Network error. Retrying in ${backoffTime/1000} seconds...`);
      retryCount++;
      
      return new Promise((resolve) => {
        setTimeout(async () => {
          // Double the backoff time for next potential retry
          backoffTime = Math.min(backoffTime * 2, MAX_BACKOFF);
          const result = await fetchAndStoreBitcoinPrice();
          resolve(result);
        }, backoffTime);
      });
    } else {
      console.error(`Maximum retries (${MAX_RETRIES}) reached after network errors.`);
      // Reset backoff for next time
      backoffTime = INITIAL_BACKOFF;
      retryCount = 0;
      return null;
    }
  }
}

// Get Bitcoin price (from database if available, or fetch from API)
async function getBitcoinPrice() {
  if (!userPreferences) {
    await loadUserPreferences();
  }
  
  try {
    const currency = userPreferences.defaultCurrency || 'usd';
    
    // Try to get the latest price from the database first
    const storedPrice = await PriceDatabase.getLatestBitcoinPrice(currency);
    
    // If we have a recent price (less than 5 minutes old), use it
    if (storedPrice && (Date.now() - storedPrice.timestamp < CACHE_DURATION)) {
      console.log(`Using cached BTC price (${currency}): ${storedPrice.price}`);
      return storedPrice.price;
    }
    
    // Otherwise fetch a fresh price
    return await fetchAndStoreBitcoinPrice();
  } catch (error) {
    console.error('Error getting Bitcoin price:', error);
    return null;
  }
}

// Listen for messages from content scripts and options page
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'getBitcoinPrice') {
    // Using an async function in a listener requires this promise handling pattern
    getBitcoinPrice().then(price => {
      sendResponse({ 
        price: price,
        displayMode: userPreferences?.displayMode || 'dual-display',
        currency: userPreferences?.defaultCurrency || 'usd'
      });
    }).catch(error => {
      console.error('Error in getBitcoinPrice:', error);
      sendResponse({ error: error.message });
    });
    
    // Return true to indicate we'll respond asynchronously
    return true;
  } 
  else if (message.action === 'saveVisitedSite') {
    // Only save site data if tracking is enabled
    if (userPreferences?.trackStats !== false) {
      PriceDatabase.saveVisitedSite(message.url, message.conversionCount)
        .then(() => {
          sendResponse({ success: true });
        })
        .catch(error => {
          console.error('Error saving visited site:', error);
          sendResponse({ error: error.message });
        });
      
      return true;
    } else {
      // Don't save if tracking is disabled
      sendResponse({ success: true, trackingDisabled: true });
      return false;
    }
  }
  else if (message.action === 'newsletterSignup') {
    // Handle newsletter signup
    console.log('Newsletter signup received:', message.email);
    
    // For Ghost CMS integration
    const subscribeToGhostNewsletter = async (email) => {
      try {
        // Get your Ghost Admin API key from environment
        const ghostApiKey = 'GHOST_ADMIN_API_KEY'; // This will be replaced at runtime
        
        // Your Ghost blog URL
        const ghostApiUrl = 'https://tftc.ghost.io/ghost/api/v3/admin/';
        
        console.log('Attempting to subscribe to Ghost newsletter...');
        
        // Create the request to add a member
        const response = await fetch(`${ghostApiUrl}members/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Ghost ${ghostApiKey}`
          },
          body: JSON.stringify({
            members: [{
              email: email,
              subscribed: true,
              labels: ['Opportunity Cost Extension'],
              note: 'Subscribed via Opportunity Cost browser extension'
            }]
          })
        });
        
        if (!response.ok) {
          throw new Error(`Ghost API error: ${response.status}`);
        }
        
        const data = await response.json();
        return { success: true, data };
      } catch (error) {
        console.error('Error subscribing to Ghost newsletter:', error);
        return { success: false, error: error.message };
      }
    };
    
    // Store subscription locally
    chrome.storage.local.set({
      'newsletter_subscribed': true,
      'newsletter_email': message.email,
      'newsletter_date': new Date().toISOString()
    });
    
    // Try to subscribe to Ghost with the API key
    subscribeToGhostNewsletter(message.email)
      .then(result => {
        if (result.success) {
          console.log('Successfully subscribed to Ghost newsletter');
          sendResponse({ success: true, ghostResult: result.data });
        } else {
          console.error('Failed to subscribe to Ghost:', result.error);
          sendResponse({ success: true, ghostError: result.error });
        }
      })
      .catch(err => {
        console.error('Error in Ghost subscription process:', err);
        sendResponse({ success: true, ghostError: err.message });
      });
    
    return true;
  }
  else if (message.action === 'openNewsletterPage') {
    // Open the newsletter page in a popup window
    chrome.windows.create({
      url: 'newsletter.html',
      type: 'popup',
      width: 550,
      height: 600
    });
    
    sendResponse({ success: true });
    return false;
  }
  else if (message.action === 'preferencesUpdated') {
    // Reload preferences when options page updates them
    loadUserPreferences().then(() => {
      sendResponse({ success: true });
    }).catch(error => {
      console.error('Error reloading preferences:', error);
      sendResponse({ error: error.message });
    });
    
    return true;
  }
  else if (message.action === 'getPreferences') {
    // Send current preferences to content script
    if (userPreferences) {
      sendResponse({ preferences: userPreferences });
    } else {
      loadUserPreferences().then(prefs => {
        sendResponse({ preferences: prefs });
      }).catch(error => {
        console.error('Error loading preferences:', error);
        sendResponse({ error: error.message });
      });
    }
    
    return true;
  }
});

// Initialize when the extension starts
async function initialize() {
  try {
    await loadUserPreferences();
    await fetchAndStoreBitcoinPrice();
    console.log('Opportunity Cost extension initialized successfully');
  } catch (error) {
    console.error('Error initializing extension:', error);
  }
}

// Start the extension
initialize();
 